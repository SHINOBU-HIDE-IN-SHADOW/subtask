#lang racket


(require racket/gui/base)
(require racket/draw)
;vector
(define (make-vect x y) (cons x y))
(define (xcor vect) (car vect))
(define (ycor vect) (cdr vect))
;curves
(define (make-curve p1 p2 p3 p4) (list p1 p2 p3 p4))
(define (start-curve cur) (car cur))
(define (control-curve cur) (cadr cur))
(define (2nd-control-curve cur) (caddr cur))
(define (end-curve cur) (cadddr cur))
;rect
(define make-rectangle list)
( define origin ( make-vect 0 0) )
( define x-axis ( make-vect 730 0) )
( define y-axis ( make-vect  0 730) )
( define frame1 ( make-rectangle origin x-axis y-axis ) )
(define (first frame) (car frame))
(define (second frame) (car (cdr frame)))
(define (third frame) (car (cdr (cdr frame))))
;segment
(define (make-segment p1 p2) (cons p1 p2))
(define (start-segment seg) (car seg))
(define (end-segment seg) (cdr seg))

;operation
(define (+vect v1 v2)
(make-vect (+ (xcor v1) (xcor v2))
(+ (ycor v1) (ycor v2))))
(define (-vect v1 v2)
(+vect v1 (scale-vect v2 -1 )))
(define (rotate-vect v angle)
  (let ((c (cos angle))
        (s (sin angle)))
    (make-vect (- (* c (xcor v))
              (* s (ycor v)))
               (+ (* c (ycor v))
                  (* s (xcor v))))))
(define (scale-vect vect factor)
  (make-vect (* factor (xcor vect))
(* factor (ycor vect))))
(define (coord-map rect)(lambda(p)(+vect (first rect)(+vect (scale-vect (second rect)(xcor p)) (scale-vect (third rect)(ycor p))))))
(define (repeat func n x)(
if(= n 0)
  x
  (func (repeat func (- n 1) x))))
;(define (rotate90 pict)(lambda(rect)(pict (make-rectangle (+vect (first rect) (second rect)) (third rect)(scale-vect (second rect) -1)))))
(define (draw-line f)(lambda(lst)
                       (let* ((x (start-curve lst)) (y (control-curve  lst))
                             (x1 (2nd-control-curve lst)) (y1 (end-curve lst))
                             (c (f x) ) (c1 (f y)) (c2 (f x1)) (c3 (f y1))) 
                         (send dc draw-path (draw-curve (xcor c) (ycor c) (xcor c1) (ycor c1) (xcor c2) (ycor c2) (xcor c3) (ycor c3))
                         ))))

(define (draw-curve x0 y0 x y x1 y1 x2 y2)
  (let ([p (new dc-path%)])
                             (send p move-to x0 y0)
                             (send p curve-to x y x1 y1 x2 y2)
                             p))
(define (make-picture seglist)
(lambda (rect)(let*((z(coord-map rect)) (f(draw-line z)) )
           (for-each f seglist))))
(define (vect-eq? vect n)(if(and (= (car vect) (car n)) (= (cdr vect) (cdr n)) )
                            #f
                            #t
                            ))

;fish
(define p1 (make-vect 0.116 0.702))
(define p2 (make-vect 0.260 0.295))
(define p3 (make-vect 0.330 0.258))
(define p4 (make-vect 0.815 0.078))
(define p5 (make-vect 0.564 0.032))
(define p6 (make-vect 0.730 0.056))
(define p7 (make-vect 0.834 0.042))
(define p8 (make-vect 1.000 0.000))
(define p9 (make-vect 0.250 0.250))
(define p10 (make-vect 0.372 0.194))
(define p11 (make-vect 0.452 0.132))
(define p12 (make-vect 0.564 0.032))
(define p13 (make-vect 0.000 0.000))
(define p14 (make-vect 0.110 0.110))
(define p15 (make-vect 0.175 0.175))
(define p16 (make-vect 0.250 0.250))
(define p17 (make-vect -0.250 0.250))
(define p18 (make-vect -0.150 0.150))
(define p19 (make-vect -0.090 0.090))
(define p20 (make-vect 0.000 0.000))
(define p21 (make-vect -0.250 0.250))
(define p22 (make-vect -0.194 0.372))
(define p23 (make-vect -0.132 0.452))
(define p24 (make-vect -0.032 0.564))
(define p25 (make-vect -0.032 0.564))
(define p26 (make-vect 0.055 0.355))
(define p27 (make-vect 0.080 0.330))
(define p28 (make-vect 0.250 0.250))
(define p29 (make-vect -0.032 0.564))
(define p30 (make-vect -0.056 0.730))
(define p31 (make-vect -0.042 0.834))
(define p32 (make-vect 0.000 1.000))
(define p33 (make-vect 0.000 1.000))
(define p34 (make-vect 0.104 0.938))
(define p35 (make-vect 0.163 0.893))
(define p36 (make-vect 0.234 0.798))
(define p37 (make-vect 0.234 0.798))
(define p38 (make-vect 0.368 0.650))
(define p39 (make-vect 0.232 0.540))
(define p40 (make-vect 0.377 0.377))
(define p41 (make-vect 0.377 0.377))
(define p42 (make-vect 0.400 0.350))
(define p43 (make-vect 0.450 0.300))
(define p44 (make-vect 0.500 0.250))
(define p45 (make-vect 0.500 0.250))
(define p46 (make-vect 0.589 0.217))
(define p47 (make-vect 0.660 0.208))
(define p48 (make-vect 0.766 0.202))
(define p49 (make-vect 0.766 0.202))
(define p50 (make-vect 0.837 0.107))
(define p51 (make-vect 0.896 0.062))
(define p52 (make-vect 1.000 0.000))
(define p53 (make-vect 0.234 0.798))
(define p54 (make-vect 0.340 0.792))
(define p55 (make-vect 0.411 0.783))
(define p56 (make-vect 0.500 0.750))
(define p57 (make-vect 0.500 0.750))
(define p58 (make-vect 0.500 0.625))
(define p59 (make-vect 0.500 0.575))
(define p60 (make-vect 0.500 0.500))
(define p61 (make-vect 0.500 0.500))
(define p62 (make-vect 0.460 0.460))
(define p63 (make-vect 0.410 0.410))
(define p64 (make-vect 0.377 0.377))
(define p65 (make-vect 0.315 0.710))
(define p66 (make-vect 0.378 0.732))
(define p67 (make-vect 0.426 0.726))
(define p68 (make-vect 0.487 0.692))
(define p69 (make-vect 0.340 0.605))
(define p70 (make-vect 0.400 0.642))
(define p71 (make-vect 0.435 0.647))
(define p72 (make-vect 0.489 0.626))
(define p73 (make-vect 0.348 0.502))
(define p74 (make-vect 0.400 0.564))
(define p75 (make-vect 0.422 0.568))
(define p76 (make-vect 0.489 0.563))
(define p77 (make-vect 0.451 0.418))
(define p78 (make-vect 0.465 0.400))
(define p79 (make-vect 0.480 0.385))
(define p80 (make-vect 0.490 0.381))
(define p81 (make-vect 0.421 0.388))
(define p82 (make-vect 0.440 0.350))
(define p83 (make-vect 0.455 0.335))
(define p84 (make-vect 0.492 0.325))
(define p85 (make-vect -0.170 0.237))
(define p86 (make-vect -0.125 0.355))
(define p87 (make-vect -0.065 0.405))
(define p88 (make-vect 0.002 0.436))
(define p89 (make-vect -0.121 0.188))
(define p90 (make-vect -0.060 0.300))
(define p91 (make-vect -0.030 0.330))
(define p92 (make-vect 0.040 0.375))
(define p93 (make-vect -0.058 0.125))
(define p94 (make-vect -0.010 0.240))
(define p95 (make-vect 0.030 0.280))
(define p96 (make-vect 0.100 0.321))
(define p97 (make-vect -0.022 0.063))
(define p98 (make-vect 0.060 0.200))
(define p99 (make-vect 0.100 0.240))
(define p100 (make-vect 0.160 0.282))
(define p101 (make-vect 0.053 0.658))
(define p102 (make-vect 0.075 0.677))
(define p103 (make-vect 0.085 0.687))
(define p104 (make-vect 0.098 0.700))
(define p105 (make-vect 0.053 0.658))
(define p106 (make-vect 0.042 0.710))
(define p107 (make-vect 0.042 0.760))
(define p108 (make-vect 0.053 0.819))
(define p109 (make-vect 0.053 0.819))
(define p110 (make-vect 0.085 0.812))
(define p111 (make-vect 0.092 0.752))
(define p112 (make-vect 0.098 0.700))
(define p113 (make-vect 0.130 0.718))
(define p114 (make-vect 0.150 0.730))
(define p115 (make-vect 0.175 0.745))
(define p116 (make-vect 0.187 0.752))
(define p117 (make-vect 0.130 0.718))
(define p118 (make-vect 0.110 0.795))
(define p119 (make-vect 0.110 0.810))
(define p120 (make-vect 0.112 0.845))
(define p121 (make-vect 0.112 0.845))
(define p122 (make-vect 0.150 0.805))
(define p123 (make-vect 0.172 0.780))
(define p124 (make-vect 0.187 0.752))





(define fish-curves
	(list
		(make-curve p1 p2 p3 p4)
		(make-curve p5 p6 p7 p8)
		(make-curve p9 p10 p11 p12)
		(make-curve p13 p14 p15 p16)
		(make-curve p17 p18 p19 p20)
		(make-curve p21 p22 p23 p24)
		(make-curve p25 p26 p27 p28)
		(make-curve p29 p30 p31 p32)
		(make-curve p33 p34 p35 p36)
		(make-curve p37 p38 p39 p40)
		(make-curve p41 p42 p43 p44)
		(make-curve p45 p46 p47 p48)
		(make-curve p49 p50 p51 p52)
		(make-curve p53 p54 p55 p56)
		(make-curve p57 p58 p59 p60)
		(make-curve p61 p62 p63 p64)
		(make-curve p65 p66 p67 p68)
		(make-curve p69 p70 p71 p72)
		(make-curve p73 p74 p75 p76)
		(make-curve p77 p78 p79 p80)
		(make-curve p81 p82 p83 p84)
		(make-curve p85 p86 p87 p88)
		(make-curve p89 p90 p91 p92)
		(make-curve p93 p94 p95 p96)
		(make-curve p97 p98 p99 p100)
		(make-curve p101 p102 p103 p104)
		(make-curve p105 p106 p107 p108)
		(make-curve p109 p110 p111 p112)
		(make-curve p113 p114 p115 p116)
		(make-curve p117 p118 p119 p120)
		(make-curve p121 p122 p123 p124)))
;-----------------------------------------------------------------------------------------------------------------------------------------
(define (rotate-helper rect angle)(
                                   cond ((< angle 0) rect) 
                                        ((= angle 0) rect)
                                        ((> (* pi 0.5) angle)
                                         (make-rectangle
                                          (+vect (first rect) (scale-vect(+vect(second rect) (third rect)) 0.5))
                                          (scale-vect(+vect(second rect) (third rect) )0.5)
                                          (scale-vect(+vect(third rect) (scale-vect  (second rect) -1 )) 0.5)
                                          ))
                                    (else (rotate-helper (make-rectangle (+vect (first rect) (second rect)) (third rect)(scale-vect (second rect) -1)) (- angle (* pi 0.5))))))
( define ( rotate pict angle )
( lambda ( rect )(pict (rotate-helper rect angle))))
( define ( rotate90 pict )( rotate pict (* pi 0.5)))
(define (flip pic)(lambda(rect) (pic (make-rectangle (+vect (first rect) (second rect)) (scale-vect (second rect) -1) (third rect)))))
( define ( above-rotate45 pict )
( lambda ( rect )((rotate pict (* pi 0.25))rect)))
;------------------------------------------------------------------------------------------------------------------------------------------------------------------
( define ( make-picture-from-curve curvelist )(make-picture curvelist))
( define ( together4 pict1 pict2 pict3 pict4 ) ( lambda ( rect )
( pict1 rect ) ( pict2 rect ) ( pict3 rect ) ( pict4 rect ) ) )
( define empty-picture ( make-picture-from-curve (list (make-curve (make-vect 0 0) (make-vect 0 0) (make-vect 0 0) (make-vect 0 0)) ) ))
( define fish ( make-picture-from-curve fish-curves ) )
( define fish2 ( flip ( above-rotate45 fish ) ) )
( define fish3 ( rotate fish2 (* 0.5 pi ) ) )
( define fish4 ( rotate fish2 (* 1.0 pi ) ) )
( define fish5 ( rotate fish2 (* 1.5 pi ) ) )
( define fish-tile ( together4 fish2 fish3 fish4 fish5 ) )
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
(define (beside pic1 pic2 x )(lambda(rect)(pic1 (make-rectangle (first rect)(scale-vect (second rect) x) (third rect)))
                               (pic2 (make-rectangle (+vect (first rect) (scale-vect (second rect) x)) (scale-vect (second rect) (- 1 x)) (third rect)))))
(define (above pic1 pic2 x )(lambda(rect)((repeat rotate90 3 (beside (rotate90 pic1)  (rotate90 pic2) x))rect)))
( define ( quardtet p q r s )(above (beside p q 0.5) (beside r s 0.5) 0.5))
( define ( nonet p q r s t u v w x ) (above (above (beside (beside v w 0.5) x (/ 2 3)) (beside (beside s t 0.5) u (/ 2 3)) (/ 1.5 3))
                                            (beside (beside p q 0.5) r (/ 2 3)) (/ 2 3)))
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
( define ( side-push pict n )
   (if (<= n 0) empty-picture
       (quardtet ( side-push pict (- n 1) ) ( side-push pict (- n 1) )  (rotate90  pict) pict)))
( define ( corner-push pict n ) (if (<= n 0) empty-picture
                                    (quardtet  (side-push pict (- n 1)) ( corner-push pict (- n 1) ) pict (repeat rotate90 3 (side-push pict (- n 1))))))
( define fish-side-push ( side-push fish-tile 2) )
( define fish-corner-push ( corner-push fish-tile 2) )
;--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
(define (square-limit pict n)
(let* ((x (corner-push pict n)) (y (side-push pict n)))
  (nonet
   (repeat rotate90 2 x) (repeat rotate90 2 y) (repeat rotate90 3 x)
   (rotate90 y) pict (repeat rotate90 3 y)
   (rotate90 x) y x)))
( define fish-square-limit ( square-limit fish-tile 2) )
;----------------------------------------------------------------------------------------------------------------------------------------------------
;========================= Picture ==============================
; DEFINE CALLBACK PAINT PROCEDURE
;canvas

(define frame (new frame% [label "Paint George"]
                   [width 747]
                   [height 769]))
(define canvas (new canvas% [parent frame]
                    [paint-callback
                     (lambda(canvas dc)
                       (send dc set-pen red-pen)
                       (send dc set-brush no-brush)
                       (on-paint)    
                       )]))
(define red-pen (make-object pen% "RED" 2 'solid))
(define no-brush (make-object brush% "BLACK" 'transparent))
(define dc (send canvas get-dc))

(define (on-paint)(fish-square-limit frame1))
;MAKING THE FRAME VISIBLE
(send frame show #t)